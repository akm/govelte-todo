// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: session/v1/session.proto

package sessionv1connect

import (
	v1 "apisvr/gen/session/v1"
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// SessionServiceName is the fully-qualified name of the SessionService service.
	SessionServiceName = "session.v1.SessionService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// SessionServiceCreateProcedure is the fully-qualified name of the SessionService's Create RPC.
	SessionServiceCreateProcedure = "/session.v1.SessionService/Create"
	// SessionServiceDeleteProcedure is the fully-qualified name of the SessionService's Delete RPC.
	SessionServiceDeleteProcedure = "/session.v1.SessionService/Delete"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	sessionServiceServiceDescriptor      = v1.File_session_v1_session_proto.Services().ByName("SessionService")
	sessionServiceCreateMethodDescriptor = sessionServiceServiceDescriptor.Methods().ByName("Create")
	sessionServiceDeleteMethodDescriptor = sessionServiceServiceDescriptor.Methods().ByName("Delete")
)

// SessionServiceClient is a client for the session.v1.SessionService service.
type SessionServiceClient interface {
	Create(context.Context, *connect.Request[v1.SessionCreateRequest]) (*connect.Response[v1.Void], error)
	Delete(context.Context, *connect.Request[v1.Void]) (*connect.Response[v1.Void], error)
}

// NewSessionServiceClient constructs a client for the session.v1.SessionService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSessionServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) SessionServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &sessionServiceClient{
		create: connect.NewClient[v1.SessionCreateRequest, v1.Void](
			httpClient,
			baseURL+SessionServiceCreateProcedure,
			connect.WithSchema(sessionServiceCreateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		delete: connect.NewClient[v1.Void, v1.Void](
			httpClient,
			baseURL+SessionServiceDeleteProcedure,
			connect.WithSchema(sessionServiceDeleteMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// sessionServiceClient implements SessionServiceClient.
type sessionServiceClient struct {
	create *connect.Client[v1.SessionCreateRequest, v1.Void]
	delete *connect.Client[v1.Void, v1.Void]
}

// Create calls session.v1.SessionService.Create.
func (c *sessionServiceClient) Create(ctx context.Context, req *connect.Request[v1.SessionCreateRequest]) (*connect.Response[v1.Void], error) {
	return c.create.CallUnary(ctx, req)
}

// Delete calls session.v1.SessionService.Delete.
func (c *sessionServiceClient) Delete(ctx context.Context, req *connect.Request[v1.Void]) (*connect.Response[v1.Void], error) {
	return c.delete.CallUnary(ctx, req)
}

// SessionServiceHandler is an implementation of the session.v1.SessionService service.
type SessionServiceHandler interface {
	Create(context.Context, *connect.Request[v1.SessionCreateRequest]) (*connect.Response[v1.Void], error)
	Delete(context.Context, *connect.Request[v1.Void]) (*connect.Response[v1.Void], error)
}

// NewSessionServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSessionServiceHandler(svc SessionServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	sessionServiceCreateHandler := connect.NewUnaryHandler(
		SessionServiceCreateProcedure,
		svc.Create,
		connect.WithSchema(sessionServiceCreateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	sessionServiceDeleteHandler := connect.NewUnaryHandler(
		SessionServiceDeleteProcedure,
		svc.Delete,
		connect.WithSchema(sessionServiceDeleteMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/session.v1.SessionService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case SessionServiceCreateProcedure:
			sessionServiceCreateHandler.ServeHTTP(w, r)
		case SessionServiceDeleteProcedure:
			sessionServiceDeleteHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedSessionServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedSessionServiceHandler struct{}

func (UnimplementedSessionServiceHandler) Create(context.Context, *connect.Request[v1.SessionCreateRequest]) (*connect.Response[v1.Void], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("session.v1.SessionService.Create is not implemented"))
}

func (UnimplementedSessionServiceHandler) Delete(context.Context, *connect.Request[v1.Void]) (*connect.Response[v1.Void], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("session.v1.SessionService.Delete is not implemented"))
}
