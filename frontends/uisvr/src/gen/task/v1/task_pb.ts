// @generated by protoc-gen-es v1.8.0 with parameter "target=ts"
// @generated from file task/v1/task.proto (package task.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * @generated from enum task.v1.Status
 */
export enum Status {
  /**
   * @generated from enum value: STATUS_UNKNOWN_UNSPECIFIED = 0;
   */
  UNKNOWN_UNSPECIFIED = 0,

  /**
   * @generated from enum value: STATUS_TODO = 1;
   */
  TODO = 1,

  /**
   * @generated from enum value: STATUS_DONE = 2;
   */
  DONE = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(Status)
proto3.util.setEnumType(Status, "task.v1.Status", [
  { no: 0, name: "STATUS_UNKNOWN_UNSPECIFIED" },
  { no: 1, name: "STATUS_TODO" },
  { no: 2, name: "STATUS_DONE" },
]);

/**
 * @generated from message task.v1.Task
 */
export class Task extends Message<Task> {
  /**
   * @generated from field: uint64 id = 1;
   */
  id = protoInt64.zero;

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: task.v1.Status status = 3;
   */
  status = Status.UNKNOWN_UNSPECIFIED;

  constructor(data?: PartialMessage<Task>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "task.v1.Task";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "status", kind: "enum", T: proto3.getEnumType(Status) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Task {
    return new Task().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Task {
    return new Task().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Task {
    return new Task().fromJsonString(jsonString, options);
  }

  static equals(a: Task | PlainMessage<Task> | undefined, b: Task | PlainMessage<Task> | undefined): boolean {
    return proto3.util.equals(Task, a, b);
  }
}

/**
 * @generated from message task.v1.TaskId
 */
export class TaskId extends Message<TaskId> {
  /**
   * @generated from field: uint64 id = 1;
   */
  id = protoInt64.zero;

  constructor(data?: PartialMessage<TaskId>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "task.v1.TaskId";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TaskId {
    return new TaskId().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TaskId {
    return new TaskId().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TaskId {
    return new TaskId().fromJsonString(jsonString, options);
  }

  static equals(a: TaskId | PlainMessage<TaskId> | undefined, b: TaskId | PlainMessage<TaskId> | undefined): boolean {
    return proto3.util.equals(TaskId, a, b);
  }
}

/**
 * @generated from message task.v1.TaskListRequest
 */
export class TaskListRequest extends Message<TaskListRequest> {
  /**
   * @generated from field: uint64 offset = 1;
   */
  offset = protoInt64.zero;

  /**
   * @generated from field: uint64 limit = 2;
   */
  limit = protoInt64.zero;

  constructor(data?: PartialMessage<TaskListRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "task.v1.TaskListRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "offset", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "limit", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TaskListRequest {
    return new TaskListRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TaskListRequest {
    return new TaskListRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TaskListRequest {
    return new TaskListRequest().fromJsonString(jsonString, options);
  }

  static equals(a: TaskListRequest | PlainMessage<TaskListRequest> | undefined, b: TaskListRequest | PlainMessage<TaskListRequest> | undefined): boolean {
    return proto3.util.equals(TaskListRequest, a, b);
  }
}

/**
 * @generated from message task.v1.TaskListResponse
 */
export class TaskListResponse extends Message<TaskListResponse> {
  /**
   * @generated from field: uint64 total = 1;
   */
  total = protoInt64.zero;

  /**
   * @generated from field: repeated task.v1.Task items = 2;
   */
  items: Task[] = [];

  constructor(data?: PartialMessage<TaskListResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "task.v1.TaskListResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "total", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "items", kind: "message", T: Task, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TaskListResponse {
    return new TaskListResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TaskListResponse {
    return new TaskListResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TaskListResponse {
    return new TaskListResponse().fromJsonString(jsonString, options);
  }

  static equals(a: TaskListResponse | PlainMessage<TaskListResponse> | undefined, b: TaskListResponse | PlainMessage<TaskListResponse> | undefined): boolean {
    return proto3.util.equals(TaskListResponse, a, b);
  }
}

/**
 * @generated from message task.v1.TaskCreateRequest
 */
export class TaskCreateRequest extends Message<TaskCreateRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: task.v1.Status status = 2;
   */
  status = Status.UNKNOWN_UNSPECIFIED;

  constructor(data?: PartialMessage<TaskCreateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "task.v1.TaskCreateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "status", kind: "enum", T: proto3.getEnumType(Status) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TaskCreateRequest {
    return new TaskCreateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TaskCreateRequest {
    return new TaskCreateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TaskCreateRequest {
    return new TaskCreateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: TaskCreateRequest | PlainMessage<TaskCreateRequest> | undefined, b: TaskCreateRequest | PlainMessage<TaskCreateRequest> | undefined): boolean {
    return proto3.util.equals(TaskCreateRequest, a, b);
  }
}

